"""
Python —Å—Ö–µ–º—ã (dataclasses) –¥–ª—è –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö
"""

from datetime import datetime
from decimal import Decimal
from typing import Optional, List
from dataclasses import dataclass, field
from enum import Enum


class TransactionType(Enum):
    """–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    INCOME = "income"
    EXPENSE = "expense"


class ReportType(Enum):
    """–¢–∏–ø –æ—Ç—á–µ—Ç–∞"""
    MONTHLY = "monthly"
    WEEKLY = "weekly"
    CUSTOM = "custom"


@dataclass
class User:
    """–°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    id: Optional[int] = None
    telegram_id: int = 0
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    language_code: Optional[str] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    is_active: bool = True
    
    # Relationships
    categories: List["Category"] = field(default_factory=list)
    transactions: List["Transaction"] = field(default_factory=list)
    budgets: List["Budget"] = field(default_factory=list)
    reports: List["Report"] = field(default_factory=list)

    @property
    def full_name(self) -> str:
        """–ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        parts = []
        if self.first_name:
            parts.append(self.first_name)
        if self.last_name:
            parts.append(self.last_name)
        return " ".join(parts) if parts else self.username or f"User {self.telegram_id}"


@dataclass
class Category:
    """–°—Ö–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    id: Optional[int] = None
    name: str = ""
    description: Optional[str] = None
    user_id: int = 0
    transaction_type: TransactionType = TransactionType.EXPENSE
    created_at: Optional[datetime] = None
    is_active: bool = True
    
    # Relationships
    user: Optional[User] = None
    transactions: List["Transaction"] = field(default_factory=list)
    budgets: List["Budget"] = field(default_factory=list)

    @property
    def type_icon(self) -> str:
        """–ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return "üìà" if self.transaction_type == TransactionType.INCOME else "üìâ"


@dataclass
class Transaction:
    """–°—Ö–µ–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    id: Optional[int] = None
    amount: Decimal = Decimal("0.00")
    description: Optional[str] = None
    transaction_type: TransactionType = TransactionType.EXPENSE
    user_id: int = 0
    category_id: int = 0
    created_at: Optional[datetime] = None
    transaction_date: Optional[datetime] = None
    
    # Relationships
    user: Optional[User] = None
    category: Optional[Category] = None

    @property
    def formatted_amount(self) -> str:
        """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ —Å –≤–∞–ª—é—Ç–æ–π"""
        sign = "+" if self.transaction_type == TransactionType.INCOME else "-"
        return f"{sign}{self.amount} ‚ÇΩ"

    @property
    def type_icon(self) -> str:
        """–ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        return "‚ûï" if self.transaction_type == TransactionType.INCOME else "‚ûñ"


@dataclass
class Budget:
    """–°—Ö–µ–º–∞ –±—é–¥–∂–µ—Ç–∞"""
    id: Optional[int] = None
    name: str = ""
    amount: Decimal = Decimal("0.00")
    spent_amount: Decimal = Decimal("0.00")
    user_id: int = 0
    category_id: int = 0
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None
    created_at: Optional[datetime] = None
    is_active: bool = True
    
    # Relationships
    user: Optional[User] = None
    category: Optional[Category] = None

    @property
    def remaining_amount(self) -> Decimal:
        """–û—Å—Ç–∞–≤—à–∞—è—Å—è —Å—É–º–º–∞ –±—é–¥–∂–µ—Ç–∞"""
        return self.amount - self.spent_amount

    @property
    def percentage_used(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
        if self.amount == 0:
            return 0.0
        return float((self.spent_amount / self.amount) * 100)

    @property
    def is_exceeded(self) -> bool:
        """–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –±—é–¥–∂–µ—Ç"""
        return self.spent_amount > self.amount

    @property
    def status_icon(self) -> str:
        """–ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±—é–¥–∂–µ—Ç–∞"""
        percentage = self.percentage_used
        if percentage >= 100:
            return "üî¥"  # –ü—Ä–µ–≤—ã—à–µ–Ω
        elif percentage >= 80:
            return "üü°"  # –ë–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É
        else:
            return "üü¢"  # –í –Ω–æ—Ä–º–µ


@dataclass
class Report:
    """–°—Ö–µ–º–∞ –æ—Ç—á–µ—Ç–∞"""
    id: Optional[int] = None
    name: str = ""
    report_type: ReportType = ReportType.MONTHLY
    user_id: int = 0
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None
    data: Optional[str] = None  # JSON –¥–∞–Ω–Ω—ã–µ
    created_at: Optional[datetime] = None
    
    # Relationships
    user: Optional[User] = None

    @property
    def type_icon(self) -> str:
        """–ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞"""
        icons = {
            ReportType.MONTHLY: "üìä",
            ReportType.WEEKLY: "üìà",
            ReportType.CUSTOM: "üìã"
        }
        return icons.get(self.report_type, "üìÑ")

    @property
    def period_description(self) -> str:
        """–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞"""
        if not self.start_date or not self.end_date:
            return "–ü–µ—Ä–∏–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω"
        
        start = self.start_date.strftime("%d.%m.%Y")
        end = self.end_date.strftime("%d.%m.%Y")
        return f"{start} - {end}" 