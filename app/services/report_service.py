"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏
"""

from datetime import datetime, timedelta
from decimal import Decimal
from typing import Optional, List, Dict, Any
from sqlalchemy.orm import Session

from app.database.schemas import Report, ReportType, TransactionType
from app.database.queries import (
    ReportQueries, UserQueries, TransactionQueries, AnalyticsQueries
)


class ReportService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏"""
    
    def __init__(self, session: Session):
        self.session = session
    
    def generate_monthly_report(self, telegram_id: int,
                               year: Optional[int] = None,
                               month: Optional[int] = None,
                               save_report: bool = True) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = UserQueries.get_user_by_telegram_id(self.session, telegram_id)
        if not user:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        now = datetime.utcnow()
        target_year = year or now.year
        target_month = month or now.month
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        summary = AnalyticsQueries.get_monthly_summary(
            self.session, user.id, target_year, target_month
        )
        
        top_expenses = AnalyticsQueries.get_top_expense_categories(
            self.session, user.id,
            datetime(target_year, target_month, 1),
            datetime(target_year + 1, 1, 1) if target_month == 12 else datetime(target_year, target_month + 1, 1),
            limit=5
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if save_report:
            report_name = f"–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç {target_year}-{target_month:02d}"
            report = ReportQueries.create_report(
                self.session,
                name=report_name,
                user_id=user.id,
                report_type=ReportType.MONTHLY,
                start_date=datetime(target_year, target_month, 1),
                end_date=datetime(target_year + 1, 1, 1) if target_month == 12 else datetime(target_year, target_month + 1, 1),
                data=str(summary)  # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            )
        
        return self._format_monthly_report(summary, top_expenses)
    
    def generate_weekly_report(self, telegram_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        user = UserQueries.get_user_by_telegram_id(self.session, telegram_id)
        if not user:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=7)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        transactions = TransactionQueries.get_user_transactions(
            self.session,
            user_id=user.id,
            start_date=start_date,
            end_date=end_date,
            limit=100
        )
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        daily_stats = {}
        for transaction in transactions:
            date_key = transaction.transaction_date.strftime("%Y-%m-%d")
            if date_key not in daily_stats:
                daily_stats[date_key] = {
                    'income': Decimal('0'),
                    'expense': Decimal('0'),
                    'transactions_count': 0
                }
            
            if transaction.transaction_type == TransactionType.INCOME:
                daily_stats[date_key]['income'] += transaction.amount
            else:
                daily_stats[date_key]['expense'] += transaction.amount
            
            daily_stats[date_key]['transactions_count'] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_name = f"–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç {start_date.strftime('%d.%m')} - {end_date.strftime('%d.%m.%Y')}"
        report = ReportQueries.create_report(
            self.session,
            name=report_name,
            user_id=user.id,
            report_type=ReportType.WEEKLY,
            start_date=start_date,
            end_date=end_date,
            data=str(daily_stats)
        )
        
        return self._format_weekly_report(daily_stats, start_date, end_date)
    
    def generate_categories_report(self, telegram_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        
        user = UserQueries.get_user_by_telegram_id(self.session, telegram_id)
        if not user:
            raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–µ—Ä–∏–æ–¥ - —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        now = datetime.utcnow()
        start_date = datetime(now.year, now.month, 1)
        if now.month == 12:
            end_date = datetime(now.year + 1, 1, 1)
        else:
            end_date = datetime(now.year, now.month + 1, 1)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        expense_categories = TransactionQueries.get_transactions_sum_by_category(
            self.session, user.id, start_date, end_date, TransactionType.EXPENSE
        )
        
        income_categories = TransactionQueries.get_transactions_sum_by_category(
            self.session, user.id, start_date, end_date, TransactionType.INCOME
        )
        
        message = f"üìä <b>–û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ {now.strftime('%m.%Y')}</b>\n\n"
        
        if expense_categories:
            message += "üí∏ <b>–†–∞—Å—Ö–æ–¥—ã:</b>\n"
            for cat in expense_categories:
                message += f"‚Ä¢ {cat['category_name']}: {cat['total_amount']} —Ä—É–±.\n"
            message += "\n"
        
        if income_categories:
            message += "üí∞ <b>–î–æ—Ö–æ–¥—ã:</b>\n"
            for cat in income_categories:
                message += f"‚Ä¢ {cat['category_name']}: {cat['total_amount']} —Ä—É–±.\n"
        
        if not expense_categories and not income_categories:
            message += "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        return message
    
    def get_user_reports(self, telegram_id: int, limit: int = 10) -> List[Report]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        user = UserQueries.get_user_by_telegram_id(self.session, telegram_id)
        if not user:
            return []
        
        reports = ReportQueries.get_user_reports(self.session, user.id)
        return reports[:limit]
    
    def _format_monthly_report(self, summary: Dict[str, Any],
                              top_expenses: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        message = (
            f"üìä <b>–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {summary['year']}-{summary['month']:02d}</b>\n\n"
            f"üí∞ –î–æ—Ö–æ–¥—ã: {summary['total_income']} —Ä—É–±.\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {summary['total_expenses']} —Ä—É–±.\n"
            f"üíµ –ë–∞–ª–∞–Ω—Å: {summary['balance']} —Ä—É–±.\n\n"
        )
        
        if summary['balance'] > 0:
            message += "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü! –î–æ—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç —Ä–∞—Å—Ö–æ–¥—ã.\n\n"
        elif summary['balance'] == 0:
            message += "üìä –î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
        else:
            message += "‚ö†Ô∏è –†–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Ö–æ–¥—ã. –°—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –±—é–¥–∂–µ—Ç.\n\n"
        
        if top_expenses:
            message += "üìà <b>–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤:</b>\n"
            for i, expense in enumerate(top_expenses, 1):
                message += f"{i}. {expense['category_name']}: {expense['total_amount']} —Ä—É–±.\n"
        
        return message
    
    def _format_weekly_report(self, daily_stats: Dict[str, Dict],
                             start_date: datetime, end_date: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        message = (
            f"üìÖ <b>–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n"
            f"üìÜ {start_date.strftime('%d.%m')} - {end_date.strftime('%d.%m.%Y')}\n\n"
        )
        
        total_income = Decimal('0')
        total_expense = Decimal('0')
        total_transactions = 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã
        for date_key, stats in daily_stats.items():
            total_income += stats['income']
            total_expense += stats['expense']
            total_transactions += stats['transactions_count']
        
        message += (
            f"üí∞ –û–±—â–∏–µ –¥–æ—Ö–æ–¥—ã: {total_income} —Ä—É–±.\n"
            f"üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_expense} —Ä—É–±.\n"
            f"üíµ –ë–∞–ª–∞–Ω—Å: {total_income - total_expense} —Ä—É–±.\n"
            f"üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}\n\n"
        )
        
        if daily_stats:
            message += "üìà <b>–ü–æ –¥–Ω—è–º:</b>\n"
            for date_key in sorted(daily_stats.keys()):
                stats = daily_stats[date_key]
                date_obj = datetime.strptime(date_key, "%Y-%m-%d")
                message += (
                    f"‚Ä¢ {date_obj.strftime('%d.%m')}: "
                    f"+{stats['income']} / -{stats['expense']} —Ä—É–±. "
                    f"({stats['transactions_count']} –æ–ø–µ—Ä–∞—Ü–∏–π)\n"
                )
        else:
            message += "–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –±—ã–ª–æ."
        
        return message 