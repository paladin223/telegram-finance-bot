"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
"""

import logging
from decimal import Decimal, InvalidOperation
from datetime import datetime
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)

from app.database import get_session
from app.database.schemas import TransactionType
from app.database.queries import CategoryQueries
from app.services.transaction_service import TransactionService
from app.bot.keyboards import (
    get_main_keyboard, get_categories_keyboard, get_cancel_keyboard
)

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_AMOUNT, WAITING_DESCRIPTION, WAITING_CATEGORY = range(3)


async def add_income_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"""
    if update.message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥":
        context.user_data['transaction_type'] = TransactionType.INCOME
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="transaction_cancel")]
        ]
        cancel_keyboard = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üí∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö:",
            reply_markup=cancel_keyboard
        )
        return WAITING_AMOUNT
    
    return ConversationHandler.END


async def add_expense_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    if update.message.text == "‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥":
        context.user_data['transaction_type'] = TransactionType.EXPENSE
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="transaction_cancel")]
        ]
        cancel_keyboard = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üí∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö:",
            reply_markup=cancel_keyboard
        )
        return WAITING_AMOUNT
    
    return ConversationHandler.END


async def amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    try:
        amount_text = update.message.text.replace(',', '.').strip()
        amount = Decimal(amount_text)
        
        if amount <= 0:
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="transaction_cancel")]
            ]
            cancel_keyboard = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=cancel_keyboard
            )
            return WAITING_AMOUNT
        
        context.user_data['amount'] = amount
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        transaction_type = context.user_data['transaction_type']
        
        for session in get_session():
            categories = CategoryQueries.get_user_categories(
                session, user.id, transaction_type
            )
            
            if categories:
                category_names = [cat.name for cat in categories]
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = []
                
                for category in category_names:
                    keyboard.append([
                        InlineKeyboardButton(category, callback_data=f"category_{category}")
                    ])
                
                keyboard.append([
                    InlineKeyboardButton("üìù –î—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="category_other")
                ])
                keyboard.append([
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="transaction_cancel")
                ])
                
                categories_keyboard = InlineKeyboardMarkup(keyboard)
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
                type_text = "–¥–æ—Ö–æ–¥–∞" if transaction_type == TransactionType.INCOME else "—Ä–∞—Å—Ö–æ–¥–∞"
                await update.message.reply_text(
                    f"üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {type_text}:",
                    reply_markup=categories_keyboard
                )
                return WAITING_CATEGORY
            else:
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = [
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="transaction_cancel")]
                ]
                cancel_keyboard = InlineKeyboardMarkup(keyboard)
                
                type_text = "–¥–æ—Ö–æ–¥–∞" if transaction_type == TransactionType.INCOME else "—Ä–∞—Å—Ö–æ–¥–∞"
                await update.message.reply_text(
                    f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {type_text}:",
                    reply_markup=cancel_keyboard
                )
                return WAITING_CATEGORY
    
    except (InvalidOperation, ValueError):
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="transaction_cancel")]
        ]
        cancel_keyboard = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 150.50):",
            reply_markup=cancel_keyboard
        )
        return WAITING_AMOUNT


async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if update.callback_query:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∫–Ω–æ–ø–∫–∏
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("category_"):
            category_name = query.data.replace("category_", "")
            
            if category_name == "other":
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = [
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="transaction_cancel")]
                ]
                cancel_keyboard = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                    reply_markup=cancel_keyboard
                )
                return WAITING_CATEGORY
            else:
                context.user_data['category_name'] = category_name
                
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = [
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="transaction_cancel")]
                ]
                cancel_keyboard = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="description_skip")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="transaction_cancel")]
                    ])
                )
                return WAITING_DESCRIPTION
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_name = update.message.text.strip()
        context.user_data['category_name'] = category_name
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="transaction_cancel")]
        ]
        cancel_keyboard = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="description_skip")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="transaction_cancel")]
            ])
        )
        return WAITING_DESCRIPTION
    
    return WAITING_CATEGORY


async def description_skip_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    user = update.effective_user
    amount = context.user_data['amount']
    category_name = context.user_data['category_name']
    transaction_type = context.user_data['transaction_type']
    
    for session in get_session():
        try:
            service = TransactionService(session)
            transaction = service.add_transaction(
                telegram_id=user.id,
                amount=amount,
                category_name=category_name,
                transaction_type=transaction_type,
                description=None
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            message = service.format_transaction_message(transaction)
            
            await query.edit_message_text(
                f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n{message}",
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"Error creating transaction: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return ConversationHandler.END


async def description_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    description = update.message.text.strip()
    
    if description.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '-']:
        description = None
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    user = update.effective_user
    amount = context.user_data['amount']
    category_name = context.user_data['category_name']
    transaction_type = context.user_data['transaction_type']
    
    for session in get_session():
        try:
            service = TransactionService(session)
            transaction = service.add_transaction(
                telegram_id=user.id,
                amount=amount,
                category_name=category_name,
                transaction_type=transaction_type,
                description=description
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            message = service.format_transaction_message(transaction)
            
            await update.message.reply_text(
                f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n{message}",
                parse_mode='HTML',
                reply_markup=get_main_keyboard()
            )
            
        except Exception as e:
            logger.error(f"Error creating transaction: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return ConversationHandler.END


async def view_transactions_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    if update.message.text == "üìä –ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏":
        user = update.effective_user
        
        for session in get_session():
            try:
                service = TransactionService(session)
                transactions = service.get_user_transactions(
                    telegram_id=user.id,
                    limit=10
                )
                
                if not transactions:
                    await update.message.reply_text(
                        "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤."
                    )
                    return
                
                message = "üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b>\n\n"
                
                for i, transaction in enumerate(transactions, 1):
                    type_emoji = "üí∞" if transaction.transaction_type == TransactionType.INCOME else "üí∏"
                    
                    message += (
                        f"{i}. {type_emoji} {transaction.amount} —Ä—É–±. - "
                        f"{transaction.category.name if transaction.category else '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n"
                        f"   üìÖ {transaction.transaction_date.strftime('%d.%m.%Y %H:%M')}\n"
                    )
                    
                    if transaction.description:
                        message += f"   üìù {transaction.description}\n"
                    
                    message += "\n"
                
                await update.message.reply_text(message, parse_mode='HTML')
                
            except Exception as e:
                logger.error(f"Error viewing transactions: {e}")
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
                )


async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        )
    else:
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_main_keyboard()
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return ConversationHandler.END


def setup_transaction_handlers(app: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤
    income_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(
                filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥$"), 
                add_income_handler
            )
        ],
        states={
            WAITING_AMOUNT: [
                CallbackQueryHandler(cancel_handler, pattern="^transaction_cancel$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, amount_handler)
            ],
            WAITING_CATEGORY: [
                CallbackQueryHandler(cancel_handler, pattern="^transaction_cancel$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, category_handler),
                CallbackQueryHandler(category_handler, pattern="^category_")
            ],
            WAITING_DESCRIPTION: [
                CallbackQueryHandler(cancel_handler, pattern="^transaction_cancel$"),
                CallbackQueryHandler(description_skip_handler, pattern="^description_skip$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, description_handler)
            ]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_handler, pattern="^transaction_cancel$"),
            MessageHandler(filters.COMMAND, cancel_handler),
            MessageHandler(
                filters.Regex("^(üí∞ –ú–æ–∏ –±—é–¥–∂–µ—Ç—ã|üìä –ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏|üìà –û—Ç—á–µ—Ç—ã|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏|‚ÑπÔ∏è –ü–æ–º–æ—â—å|‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥)$"), 
                cancel_handler
            )
        ],
        per_chat=True,
        per_user=True
    )
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
    expense_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(
                filters.Regex("^‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥$"), 
                add_expense_handler
            )
        ],
        states={
            WAITING_AMOUNT: [
                CallbackQueryHandler(cancel_handler, pattern="^transaction_cancel$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, amount_handler)
            ],
            WAITING_CATEGORY: [
                CallbackQueryHandler(cancel_handler, pattern="^transaction_cancel$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, category_handler),
                CallbackQueryHandler(category_handler, pattern="^category_")
            ],
            WAITING_DESCRIPTION: [
                CallbackQueryHandler(cancel_handler, pattern="^transaction_cancel$"),
                CallbackQueryHandler(description_skip_handler, pattern="^description_skip$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, description_handler)
            ]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_handler, pattern="^transaction_cancel$"),
            MessageHandler(filters.COMMAND, cancel_handler),
            MessageHandler(
                filters.Regex("^(üí∞ –ú–æ–∏ –±—é–¥–∂–µ—Ç—ã|üìä –ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏|üìà –û—Ç—á–µ—Ç—ã|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏|‚ÑπÔ∏è –ü–æ–º–æ—â—å|‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥)$"), 
                cancel_handler
            )
        ],
        per_chat=True,
        per_user=True
    )
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    app.add_handler(MessageHandler(
        filters.Regex("^üìä –ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏$"),
        view_transactions_handler
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º conversation handlers
    app.add_handler(income_conv_handler)
    app.add_handler(expense_conv_handler) 