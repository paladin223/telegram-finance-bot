"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏
"""

import logging
from telegram import Update
from telegram.ext import (
    Application, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes
)

from app.database import get_session
from app.services.report_service import ReportService
from app.bot.keyboards import get_reports_keyboard

logger = logging.getLogger(__name__)


async def reports_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    if update.message.text == "üìà –û—Ç—á–µ—Ç—ã":
        await update.message.reply_text(
            "üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤:",
            reply_markup=get_reports_keyboard()
        )


async def handle_report_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    if query.data == "report_monthly":
        for session in get_session():
            try:
                service = ReportService(session)
                report = service.generate_monthly_report(user.id)
                
                await query.edit_message_text(
                    f"üìä <b>–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n{report}",
                    parse_mode='HTML'
                )
                
            except Exception as e:
                logger.error(f"Error generating monthly report: {e}")
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞"
                )
    
    elif query.data == "report_weekly":
        for session in get_session():
            try:
                service = ReportService(session)
                report = service.generate_weekly_report(user.id)
                
                await query.edit_message_text(
                    f"üìà <b>–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n{report}",
                    parse_mode='HTML'
                )
                
            except Exception as e:
                logger.error(f"Error generating weekly report: {e}")
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞"
                )
    
    elif query.data == "report_categories":
        for session in get_session():
            try:
                service = ReportService(session)
                report = service.generate_categories_report(user.id)
                
                await query.edit_message_text(
                    f"üìä <b>–û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n\n{report}",
                    parse_mode='HTML'
                )
                
            except Exception as e:
                logger.error(f"Error generating categories report: {e}")
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞"
                )
    
    elif query.data == "report_history":
        await query.edit_message_text(
            "üìö –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤\n\n"
            "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
            "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!"
        )


def setup_report_handlers(app: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç—á–µ—Ç–æ–≤"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤
    app.add_handler(MessageHandler(
        filters.Regex("^üìà –û—Ç—á–µ—Ç—ã$"),
        reports_menu_handler
    ))
    
    # Callback handlers –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    app.add_handler(CallbackQueryHandler(
        handle_report_callbacks,
        pattern=r"^report_"
    )) 