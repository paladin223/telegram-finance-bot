"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—é–¥–∂–µ—Ç–∞–º–∏
"""

import logging
from datetime import datetime, timedelta
from decimal import Decimal, InvalidOperation
from telegram import Update
from telegram.ext import (
    Application, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)

from app.database import get_session
from app.services.budget_service import BudgetService
from app.database.queries import CategoryQueries, UserQueries
from app.database.schemas import TransactionType
from app.bot.keyboards import get_budget_keyboard, get_categories_keyboard, get_cancel_keyboard

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
BUDGET_NAME, BUDGET_AMOUNT, BUDGET_CATEGORY, BUDGET_PERIOD = range(4)


async def budgets_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –±—é–¥–∂–µ—Ç–æ–≤"""
    if update.message.text == "üí∞ –ú–æ–∏ –±—é–¥–∂–µ—Ç—ã":
        await update.message.reply_text(
            "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞–º–∏:",
            reply_markup=get_budget_keyboard()
        )


async def handle_budget_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±—é–¥–∂–µ—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    if query.data == "budget_list":
        for session in get_session():
            try:
                service = BudgetService(session)
                budgets_data = service.get_user_budgets(user.id)
                
                if not budgets_data:
                    await query.edit_message_text(
                        "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤.\n"
                        "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤!"
                    )
                    return
                
                message = "üí∞ <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã:</b>\n\n"
                
                for budget_info in budgets_data:
                    budget_message = service.format_budget_message(budget_info)
                    message += budget_message + "\n\n"
                
                await query.edit_message_text(message, parse_mode='HTML')
                
            except Exception as e:
                logger.error(f"Error getting budgets: {e}")
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–æ–≤"
                )
    
    elif query.data == "budget_alerts":
        for session in get_session():
            try:
                service = BudgetService(session)
                alerts = service.check_budget_alerts(user.id)
                
                if not alerts:
                    await query.edit_message_text(
                        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –±—é–¥–∂–µ—Ç—ã –≤ –Ω–æ—Ä–º–µ.\n"
                        "–ù–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–π –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π."
                    )
                else:
                    message = "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –±—é–¥–∂–µ—Ç–∞–º:</b>\n\n"
                    message += "\n\n".join(alerts)
                    await query.edit_message_text(message, parse_mode='HTML')
                    
            except Exception as e:
                logger.error(f"Error checking budget alerts: {e}")
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                )


async def start_budget_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")]
    ]
    cancel_keyboard = InlineKeyboardMarkup(keyboard)
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
    await query.edit_message_text(
        "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—é–¥–∂–µ—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ñ–µ–≤—Ä–∞–ª—å', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è')",
        parse_mode='HTML',
        reply_markup=cancel_keyboard
    )
    return BUDGET_NAME


async def budget_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    budget_name = update.message.text.strip()
    
    if len(budget_name) < 2:
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")]
        ]
        cancel_keyboard = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=cancel_keyboard
        )
        return BUDGET_NAME
    
    if len(budget_name) > 100:
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")]
        ]
        cancel_keyboard = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=cancel_keyboard
        )
        return BUDGET_NAME
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['budget_name'] = budget_name
    
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")]
    ]
    cancel_keyboard = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{budget_name}</b>\n\n"
        "üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±—é–¥–∂–µ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000, 5000.50)",
        parse_mode='HTML',
        reply_markup=cancel_keyboard
    )
    
    return BUDGET_AMOUNT


async def budget_amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –±—é–¥–∂–µ—Ç–∞"""
    amount_text = update.message.text.strip().replace(',', '.')
    
    try:
        amount = Decimal(amount_text)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        if amount > Decimal('999999999.99'):
            raise ValueError("–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è")
    except (InvalidOperation, ValueError) as e:
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")]
        ]
        cancel_keyboard = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000 –∏–ª–∏ 5000.50):",
            reply_markup=cancel_keyboard
        )
        return BUDGET_AMOUNT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['budget_amount'] = amount
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.effective_user
    for session in get_session():
        try:
            db_user = UserQueries.get_user_by_telegram_id(session, user.id)
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            categories = CategoryQueries.get_user_categories(session, db_user.id)
            expense_categories = [cat.name for cat in categories if cat.transaction_type == TransactionType.EXPENSE]
            
            if not expense_categories:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤.\n"
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–∞, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∏—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
                )
                return ConversationHandler.END
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = []
            
            for category in expense_categories:
                keyboard.append([
                    InlineKeyboardButton(category, callback_data=f"budget_cat_{category}")
                ])
            
            keyboard.append([
                InlineKeyboardButton("üìù –î—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="budget_cat_other")
            ])
            keyboard.append([
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")
            ])
            
            categories_keyboard = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n\n"
                "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±—é–¥–∂–µ—Ç–∞:",
                parse_mode='HTML',
                reply_markup=categories_keyboard
            )
            
            return BUDGET_CATEGORY
            
        except Exception as e:
            logger.error(f"Error getting categories: {e}")
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")]
            ]
            cancel_keyboard = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                reply_markup=cancel_keyboard
            )
            return BUDGET_AMOUNT


async def budget_category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—é–¥–∂–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("budget_cat_"):
        category_name = query.data.replace("budget_cat_", "")
        
        if category_name == "other":
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")]
            ]
            cancel_keyboard = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
                reply_markup=cancel_keyboard
            )
            context.user_data['waiting_for_custom_category'] = True
            return BUDGET_CATEGORY
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['budget_category'] = category_name
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="period_current_month")],
            [InlineKeyboardButton("üìÜ –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü", callback_data="period_next_month")],
            [InlineKeyboardButton("üóìÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")]
        ]
        
        await query.edit_message_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_name}</b>\n\n"
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –±—é–¥–∂–µ—Ç–∞:",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return BUDGET_PERIOD
    
    # –ï—Å–ª–∏ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if context.user_data.get('waiting_for_custom_category'):
        category_name = update.message.text.strip()
        
        if len(category_name) < 2:
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")]
            ]
            cancel_keyboard = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=cancel_keyboard
            )
            return BUDGET_CATEGORY
        
        context.user_data['budget_category'] = category_name
        context.user_data['waiting_for_custom_category'] = False
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="period_current_month")],
            [InlineKeyboardButton("üìÜ –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü", callback_data="period_next_month")],
            [InlineKeyboardButton("üóìÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="period_custom")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")]
        ]
        
        await update.message.reply_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_name}</b>\n\n"
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –±—é–¥–∂–µ—Ç–∞:",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return BUDGET_PERIOD


async def budget_period_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    now = datetime.now()
    
    if query.data == "period_current_month":
        # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        start_date = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        if now.month == 12:
            end_date = start_date.replace(year=now.year + 1, month=1) - timedelta(days=1)
        else:
            end_date = start_date.replace(month=now.month + 1) - timedelta(days=1)
        end_date = end_date.replace(hour=23, minute=59, second=59)
        
    elif query.data == "period_next_month":
        # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        if now.month == 12:
            start_date = datetime(now.year + 1, 1, 1)
            end_date = datetime(now.year + 1, 2, 1) - timedelta(days=1)
        else:
            start_date = datetime(now.year, now.month + 1, 1)
            if now.month == 11:
                end_date = datetime(now.year + 1, 1, 1) - timedelta(days=1)
            else:
                end_date = datetime(now.year, now.month + 2, 1) - timedelta(days=1)
        end_date = end_date.replace(hour=23, minute=59, second=59)
        
    elif query.data == "period_custom":
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="budget_cancel")]
        ]
        cancel_keyboard = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üóìÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã—à–µ.",
            reply_markup=cancel_keyboard
        )
        return BUDGET_PERIOD
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        return BUDGET_PERIOD
    
    # –°–æ–∑–¥–∞–µ–º –±—é–¥–∂–µ—Ç
    try:
        user = update.effective_user
        budget_name = context.user_data['budget_name']
        budget_amount = context.user_data['budget_amount']
        budget_category = context.user_data['budget_category']
        
        for session in get_session():
            service = BudgetService(session)
            budget = service.create_budget(
                telegram_id=user.id,
                name=budget_name,
                amount=budget_amount,
                category_name=budget_category,
                start_date=start_date,
                end_date=end_date
            )
            
            success_message = (
                "üéâ <b>–ë—é–¥–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {budget.name}\n"
                f"üí∞ –°—É–º–º–∞: {budget.amount} ‚ÇΩ\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {budget_category}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n\n"
                "üí° –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
            )
            
            await query.edit_message_text(success_message, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"Error creating budget: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞: {e}")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context.user_data.clear()
    
    return ConversationHandler.END


async def cancel_budget_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    context.user_data.clear()
    return ConversationHandler.END


def setup_budget_handlers(app: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±—é–¥–∂–µ—Ç–æ–≤"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –±—é–¥–∂–µ—Ç–æ–≤
    app.add_handler(MessageHandler(
        filters.Regex("^üí∞ –ú–æ–∏ –±—é–¥–∂–µ—Ç—ã$"),
        budgets_menu_handler
    ))
    
    # ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–æ–≤
    budget_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(
            start_budget_creation,
            pattern="^budget_create$"
        )],
        states={
            BUDGET_NAME: [
                CallbackQueryHandler(cancel_budget_creation, pattern="^budget_cancel$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, budget_name_handler)
            ],
            BUDGET_AMOUNT: [
                CallbackQueryHandler(cancel_budget_creation, pattern="^budget_cancel$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, budget_amount_handler)
            ],
            BUDGET_CATEGORY: [
                CallbackQueryHandler(cancel_budget_creation, pattern="^budget_cancel$"),
                CallbackQueryHandler(budget_category_handler, pattern="^budget_cat_"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, budget_category_handler)
            ],
            BUDGET_PERIOD: [
                CallbackQueryHandler(cancel_budget_creation, pattern="^budget_cancel$"),
                CallbackQueryHandler(budget_period_handler, pattern="^period_")
            ],
        },
        fallbacks=[
            CallbackQueryHandler(cancel_budget_creation, pattern="^budget_cancel$"),
            MessageHandler(filters.COMMAND, cancel_budget_creation),
            MessageHandler(
                filters.Regex("^(‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥|‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥|üìä –ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏|üìà –û—Ç—á–µ—Ç—ã|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏|‚ÑπÔ∏è –ü–æ–º–æ—â—å)$"), 
                cancel_budget_creation
            )
        ],
        allow_reentry=True
    )
    
    app.add_handler(budget_conv_handler)
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ callback handlers –¥–ª—è –±—é–¥–∂–µ—Ç–æ–≤
    app.add_handler(CallbackQueryHandler(
        handle_budget_callbacks,
        pattern=r"^budget_(list|alerts)$"
    )) 