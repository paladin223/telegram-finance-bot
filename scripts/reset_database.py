#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ)
"""

import sys
import argparse
from pathlib import Path
from typing import NoReturn

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.config import get_config
from app.database import get_session, init_database
from app.database.models import Base, User, Category, Transaction, Budget, Report
from app.database.schemas import TransactionType
from sqlalchemy import text, MetaData


def initialize_session_factory() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session factory –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü"""
    config = get_config()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π URL –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
    db_url: str = config.database_url
    if db_url.startswith("postgresql+asyncpg://"):
        db_url = db_url.replace("postgresql+asyncpg://", "postgresql://")
    elif db_url.startswith("sqlite+aiosqlite://"):
        db_url = db_url.replace("sqlite+aiosqlite://", "sqlite:///")
    
    from sqlalchemy import create_engine
    from sqlalchemy.orm import sessionmaker
    
    engine = create_engine(
        db_url,
        echo=config.debug,
        pool_pre_ping=True,
        pool_recycle=3600,
    )
    
    session_factory = sessionmaker(bind=engine)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –º–æ–¥—É–ª–µ database
    import app.database.database as db_module
    db_module.engine = engine
    db_module.session_factory = session_factory


def drop_all_tables() -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
    print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
    
    for session in get_session():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            metadata = MetaData()
            metadata.reflect(bind=session.bind)
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è foreign keys)
            tables_to_drop = [
                "reports",
                "budgets", 
                "transactions",
                "categories",
                "users"
            ]
            
            for table_name in tables_to_drop:
                if table_name in metadata.tables:
                    print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}...")
                    session.execute(text(f"DROP TABLE IF EXISTS {table_name} CASCADE"))
                else:
                    print(f"  ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            session.commit()
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
            
        except Exception as e:
            session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            raise


def create_all_tables() -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∑–∞–Ω–æ–≤–æ"""
    print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    
    try:
        init_database()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        raise


def create_sample_data() -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    for session in get_session():
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User(
                telegram_id=123456789,
                username="testuser",
                first_name="–¢–µ—Å—Ç",
                last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                language_code="ru"
            )
            session.add(test_user)
            session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
            income_categories = [
                Category(name="–ó–∞—Ä–ø–ª–∞—Ç–∞", transaction_type=TransactionType.INCOME, user_id=test_user.id),
                Category(name="–§—Ä–∏–ª–∞–Ω—Å", transaction_type=TransactionType.INCOME, user_id=test_user.id),
                Category(name="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", transaction_type=TransactionType.INCOME, user_id=test_user.id),
                Category(name="–ü–æ–¥–∞—Ä–∫–∏", transaction_type=TransactionType.INCOME, user_id=test_user.id),
            ]
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
            expense_categories = [
                Category(name="–ü—Ä–æ–¥—É–∫—Ç—ã", transaction_type=TransactionType.EXPENSE, user_id=test_user.id),
                Category(name="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", transaction_type=TransactionType.EXPENSE, user_id=test_user.id),
                Category(name="–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", transaction_type=TransactionType.EXPENSE, user_id=test_user.id),
                Category(name="–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", transaction_type=TransactionType.EXPENSE, user_id=test_user.id),
                Category(name="–ó–¥–æ—Ä–æ–≤—å–µ", transaction_type=TransactionType.EXPENSE, user_id=test_user.id),
                Category(name="–û–¥–µ–∂–¥–∞", transaction_type=TransactionType.EXPENSE, user_id=test_user.id),
                Category(name="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", transaction_type=TransactionType.EXPENSE, user_id=test_user.id),
            ]
            
            all_categories = income_categories + expense_categories
            session.add_all(all_categories)
            session.commit()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user.username}")
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(income_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤")
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(expense_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤")
            
        except Exception as e:
            session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise


def check_database_status() -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    
    try:
        for session in get_session():
            tables_info = [
                ("users", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
                ("categories", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"),
                ("transactions", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"),
                ("budgets", "–ë—é–¥–∂–µ—Ç—ã"),
                ("reports", "–û—Ç—á–µ—Ç—ã")
            ]
            
            for table_name, description in tables_info:
                try:
                    count = session.execute(text(f"SELECT COUNT(*) FROM {table_name}")).scalar()
                    print(f"  üìã {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
                except Exception:
                    print(f"  ‚ùå {table_name}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î: {e}")


def confirm_action(message: str) -> bool:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    while True:
        response = input(f"{message} (y/N): ").lower().strip()
        if response in ['y', 'yes', '–¥–∞']:
            return True
        elif response in ['n', 'no', '–Ω–µ—Ç', '']:
            return False
        else:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ 'n' –¥–ª—è –æ—Ç–º–µ–Ω—ã")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Telegram Finance Bot",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python scripts/reset_database.py                    # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
  python scripts/reset_database.py --force            # –ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  python scripts/reset_database.py --no-sample-data   # –ë–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  python scripts/reset_database.py --check-only       # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
    )
    
    parser.add_argument(
        '--force', '-f',
        action='store_true',
        help='–ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'
    )
    
    parser.add_argument(
        '--no-sample-data',
        action='store_true',
        help='–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'
    )
    
    parser.add_argument(
        '--check-only', '-c',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î, –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å'
    )
    
    args = parser.parse_args()
    
    print("üóÑÔ∏è –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Telegram Finance Bot")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session factory
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
        initialize_session_factory()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_config()
        db_name = config.database_url.split('@')[-1].split('/')[1] if '@' in config.database_url else config.database_url
        print(f"üîß –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        check_database_status()
        
        if args.check_only:
            print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ!")
        print("  ‚Ä¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        print("  ‚Ä¢ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        print("  ‚Ä¢ –í—Å–µ –±—é–¥–∂–µ—Ç—ã")
        print("  ‚Ä¢ –í—Å–µ –æ—Ç—á–µ—Ç—ã")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not args.force:
            if not confirm_action("\nü§î –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?"):
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
        
        print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        drop_all_tables()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ
        create_all_tables()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
        if not args.no_sample_data:
            create_sample_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        check_database_status()
        
        print("\n" + "=" * 50)
        print("üéâ –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        if not args.no_sample_data:
            print("\nüí° –î–æ—Å—Ç—É–ø–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:")
            print("  ‚Ä¢ Telegram ID: 123456789")
            print("  ‚Ä¢ Username: testuser")
            print("  ‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ:")
        print("  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: python main.py")
        print("  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã: pytest")
        
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 